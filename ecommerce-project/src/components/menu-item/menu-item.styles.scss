.menu-item {
  min-width: 30%;
  height: 240px;
  flex: 1 1 auto;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid black;
  margin: 0 7.5px 15px;
  overflow: hidden; // This is setted so the background-image doesn't go out of its menu-item
  // container div, an only grows inside the div

  &:hover {
    cursor: pointer;

    & .background-image {
      transform: scale(1.1);
      transition: transform 6s cubic-bezier(0.25, 0.45, 0.45, 0.95);
    }

    & .content {
      opacity: 0.9;
    }
  }

  &.large {
    height: 380px;
  }

  // The & is basically a joker, is equivalent to saying .menu-item
  // So, here we're adding a selector of first-child and last-child to .menu-item
  &:first-child {
    margin-right: 7.5px;
  }

  // Is the equivalent to writing .menu-item:last-child { }
  &:last-child {
    margin-left: 7.5px;
  }

  .background-image {
    width: 100%;
    height: 100%;
    background-position: center;
    background-size: cover;
  }

  // This is equivalent to writing .menu-item .content { }
  // Meaning all elements with .content class inside .menu-item
  .content {
    height: 90px;
    padding: 0 25px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    border: 1px solid black;
    background-color: white;
    opacity: 0.7;
    position: absolute; // This means that the .content will be positioned as absolute, meaning that
    // its location won't be affected by any other element, it'll remain in an absolute position

    .title {
      font-weight: bold;
      margin-bottom: 6px;
      font-size: 22px;
      color: #4a4a4a;
    }

    .subtitle {
      font-weight: lighter;
      font-size: 16px;
    }
  }
}
